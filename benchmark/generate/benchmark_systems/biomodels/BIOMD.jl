import AbstractAlgebra

function BIOMD0000000123(; k=AbstractAlgebra.QQ, internal_ordering=:degrevlex)
    _, (x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14) =
        AbstractAlgebra.polynomial_ring(
            k,
            [:x1, :x2, :x3, :x4, :x5, :x6, :x7, :x8, :x9, :x10, :x11, :x12, :x13, :x14],
            internal_ordering=internal_ordering
        )
    [
        -3 * x1^3 * x8 - 1 // k(2) * x1 + 5649 // k(11300) * x2 + 3 * x4,
        113 // k(538) * x1 - 3 * x2^3 * x14 - 21 // k(100) * x2 + 3 * x10,
        -663 // k(100) * x3 * x4 - 11 // k(3125) * x3 +
        2 // k(78125) * x5 +
        21 // k(12500) * x6 +
        807 // k(226000) * x9,
        x1^3 * x8 - 663 // k(100) * x3 * x4 - 663 // k(100) * x4 * x5 - 25023 // k(25000) * x4 +
        21 // k(12500) * x6 +
        21 // k(12500) * x7 +
        5111 // k(1130000) * x10,
        8 // k(3125) * x3 - 663 // k(100) * x4 * x5 - 78129 // k(156250) * x5 +
        21 // k(12500) * x7 +
        269 // k(22600) * x11,
        663 // k(100) * x3 * x4 - 231 // k(25000) * x6 + 1 // k(2) * x7 + 269 // k(226) * x12,
        663 // k(100) * x4 * x5 + 8 // k(3125) * x6 - 12521 // k(12500) * x7 +
        269 // k(22600) * x13,
        -x1^3 * x8 + x4 - 23 // k(25000) * x8 + 5111 // k(1130000) * x14,
        339 // k(840625) * x3 - 663 // k(100) * x9 * x10 - 203 // k(50000) * x9 +
        2 // k(78125) * x11 +
        21 // k(12500) * x12,
        x2^3 * x14 + 2599 // k(6725000) * x4 - 663 // k(100) * x9 * x10 -
        663 // k(100) * x10 * x11 - 10019 // k(10000) * x10 +
        21 // k(12500) * x12 +
        21 // k(12500) * x13,
        113 // k(538) * x5 + 8 // k(3125) * x9 - 663 // k(100) * x10 * x11 -
        3141 // k(625000) * x11 + 21 // k(12500) * x13,
        113 // k(53800) * x6 + 663 // k(100) * x9 * x10 - 6303 // k(12500) * x12 + 1 // k(2) * x13,
        113 // k(538) * x7 + 663 // k(100) * x10 * x11 + 8 // k(3125) * x12 -
        12667 // k(25000) * x13,
        -x2^3 * x14 + 2599 // k(6725000) * x8 + x10 - 19 // k(10000) * x14
    ]
end

function BIOMD0000000103(; k=AbstractAlgebra.QQ, internal_ordering=:degrevlex)
    _, (x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17) =
        AbstractAlgebra.polynomial_ring(
            k,
            [
                :x1,
                :x2,
                :x3,
                :x4,
                :x5,
                :x6,
                :x7,
                :x8,
                :x9,
                :x10,
                :x11,
                :x12,
                :x13,
                :x14,
                :x15,
                :x16,
                :x17
            ],
            internal_ordering=internal_ordering
        )
    [
        -1 // k(500) * x1 * x2 - 1 // k(500) * x1 * x3 - 1 // k(500) * x1 * x10 -
        1 // k(500) * x1 * x11 - 1 // k(500) * x1 * x14 - 1 // k(500) * x1 * x16 -
        1 // k(1000) * x1 +
        1 // k(10) * x5 +
        1 // k(10) * x6 +
        1 // k(10) * x12 +
        1 // k(10) * x13 +
        1 // k(10) * x15 +
        1 // k(10) * x17 +
        1 // k(50),
        -1 // k(500) * x1 * x2 - 1 // k(1000) * x2 * x4 - 1 // k(5000) * x2 * x8 -
        1 // k(1000) * x2 * x9 - 1 // k(1000) * x2 +
        1 // k(1000) * x3 +
        1 // k(10) * x6 +
        1 // k(1000) * x14 +
        1 // k(50),
        -1 // k(500) * x1 * x3 + 1 // k(1000) * x2 * x4 - 3 // k(1000) * x3 * x8 -
        1 // k(500) * x3 +
        1 // k(10) * x5 +
        1 // k(1000) * x14,
        -1 // k(1000) * x2 * x4 + 1 // k(1000) * x3 - 1 // k(1000) * x4 * x6 -
        3 // k(1000) * x4 * x8 - 1 // k(1000) * x4 * x11 - 1 // k(1000) * x4 * x12 -
        1 // k(1000) * x4 +
        1 // k(1000) * x5 +
        1 // k(1000) * x9 +
        1 // k(1000) * x10 +
        1 // k(1000) * x13 +
        1 // k(25),
        1 // k(500) * x1 * x3 + 1 // k(1000) * x4 * x6 - 3 // k(1000) * x5 * x8 -
        51 // k(500) * x5 + 1 // k(1000) * x15,
        1 // k(500) * x1 * x2 - 1 // k(1000) * x4 * x6 + 1 // k(1000) * x5 -
        1 // k(5000) * x6 * x8 - 1 // k(1000) * x6 * x9 - 101 // k(1000) * x6 + 1 // k(1000) * x15,
        -1 // k(200000) * x2 * x7 - 7 // k(20000) * x6 * x7 - 1 // k(20000) * x7 * x11 -
        7 // k(2000) * x7 * x12 - 1 // k(1000) * x7 + 1 // k(5),
        1 // k(200000) * x2 * x7 - 3 // k(1000) * x3 * x8 - 3 // k(1000) * x4 * x8 -
        3 // k(1000) * x5 * x8 +
        7 // k(20000) * x6 * x7 +
        1 // k(20000) * x7 * x11 +
        7 // k(2000) * x7 * x12 - 3 // k(1000) * x8 * x10 - 3 // k(1000) * x8 * x13 -
        1 // k(1000) * x8 +
        1 // k(1000) * x9 +
        1 // k(1000) * x14 +
        1 // k(1000) * x15 +
        1 // k(1000) * x16 +
        1 // k(1000) * x17,
        -1 // k(1000) * x2 * x9 + 3 // k(1000) * x4 * x8 - 1 // k(1000) * x6 * x9 -
        1 // k(1000) * x9 * x11 - 1 // k(1000) * x9 * x12 - 1 // k(500) * x9 +
        1 // k(1000) * x14 +
        1 // k(1000) * x15 +
        1 // k(1000) * x16 +
        1 // k(1000) * x17,
        -1 // k(500) * x1 * x10 + 1 // k(1000) * x4 * x11 - 3 // k(1000) * x8 * x10 -
        1 // k(500) * x10 +
        1 // k(10) * x13 +
        1 // k(1000) * x16,
        -1 // k(500) * x1 * x11 + 1 // k(5000) * x2 * x8 - 1 // k(1000) * x4 * x11 -
        1 // k(1000) * x9 * x11 + 1 // k(1000) * x10 - 1 // k(1000) * x11 +
        1 // k(10) * x12 +
        1 // k(1000) * x16,
        1 // k(500) * x1 * x11 - 1 // k(1000) * x4 * x12 + 1 // k(5000) * x6 * x8 -
        1 // k(1000) * x9 * x12 - 101 // k(1000) * x12 +
        1 // k(1000) * x13 +
        1 // k(1000) * x17,
        1 // k(500) * x1 * x10 + 1 // k(1000) * x4 * x12 - 3 // k(1000) * x8 * x13 -
        51 // k(500) * x13 + 1 // k(1000) * x17,
        -1 // k(500) * x1 * x14 + 1 // k(1000) * x2 * x9 + 3 // k(1000) * x3 * x8 -
        3 // k(1000) * x14 + 1 // k(10) * x15,
        1 // k(500) * x1 * x14 + 3 // k(1000) * x5 * x8 + 1 // k(1000) * x6 * x9 -
        51 // k(500) * x15,
        -1 // k(500) * x1 * x16 + 3 // k(1000) * x8 * x10 + 1 // k(1000) * x9 * x11 -
        3 // k(1000) * x16 + 1 // k(10) * x17,
        1 // k(500) * x1 * x16 + 3 // k(1000) * x8 * x13 + 1 // k(1000) * x9 * x12 -
        13 // k(125) * x17
    ]
end
